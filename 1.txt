事件原理Event Loop
        阿里交叉面问到的js事件执行机制。我大概谈了下event loop，microtask，task queue。然后事件委托、捕获、冒泡、目标阶段大概谈了下，也顺道谈了下target和currentTarget。
    事件模型
    事件捕获阶段(capturing phase)。事件从document一直向下传播到目标元素, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行。
    事件处理阶段(target phase)。事件到达目标元素, 触发目标元素的监听函数。
    事件冒泡阶段(bubbling phase)。事件从目标元素冒泡到document, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行。
    18.DOM事件类
    dom事件代理,有什么优点?2.Tap事件,Touch，8.事件模型6.DOM事件的绑定的几种方式5.DOM事件中target和currentTarget的区别addEventListener绑定事件?参数不同的执行顺序.
        DOM事件的级别
        DOM0，element.onclick = function(){}
        DOM2，element.addEventListener('click', function(){}, false);
        DOM事件模型是什么：指的是冒泡和捕获
        DOM事件流是什么：捕获阶段 -> 目标阶段 -> 冒泡阶段
        描述DOM事件捕获的具体流程
        window --> document --> documentElement(html标签) --> body --> .... --> 目标对象
        Event对象常见应用
        event.preventDefault()，阻止默认行为
        event.stopPropagation()，阻止事件冒泡
        event.stopImmediatePropagation()，阻止剩余的事件处理函数执行并且防止事件冒泡到DOM树上，这个方法不接受任何参数。
        event.currentTarget，返回绑定事件的元素
        event.target，返回触发事件的元素
        如何自定义事件
        Event，不能传递参数
        var eve = new Event('自定义事件名');
        ev.addEventListener('自定义事件名', function(){
            console.log('自定义事件')
        });
        ev.dispatchEvent(eve);
        CustomEvent，还可以指定参数
    如果一个标签里面包含了10000个image，如何有效地对这10000个image实现事件绑定，比如说click事件。（考察事件冒泡机制）
    假设现在有对象A、B，A对象绑定了S事件，如何对B对象也绑定S事件？（其实不清楚）
    当某个事件发生时，如果获得事件发生的对象。（ff和ie不同）
    当绑定事件时，this指针指向的是？
    当为document绑定事件时，this指针指向的是？
    
闭包
    函数闭包使用得多吗？什么情况下需要使用函数闭包？

调用栈，
Promise
    promise的实现原理，进一步会问async、await是否使用过
    Promise对象(前端异步解决方案进化史，generator函数，async函数)
   项目里Promise的使用
    7.promise原理

ES6
    ES6常用特性
    3.ES6 let、const    
    变量定义(let和const,可变与不可变，const定义对象的特殊情况)
    解构赋值
    模板字符串
    数组新API(例：Array.from(),entries(),values(),keys())
    箭头函数(rest参数，扩展运算符，::绑定this)
    Set和Map数据结构(set实例成员值唯一存储key值，map实例存储键值对(key-value))
    Class语法糖(super关键字)
工程化，

webpack    
    webpack按需加载(怎么实现，什么情况下需要按需加载)
    webpack打包原理、如何写webpack插件等。
    编写过webpack的扩展嘛，Plugin或者loader
    23.如何快速合并雪碧图
        webpack：optimize-css-assets-webpack-plugin
    2.webpack.load的原理
        loaders是你用在app源码上的转换元件。他们是用node.js运行的，把源文件作为参数，返回新的资源的函数。
    webpack工具和node了解哪些?node各个模块的底层原理?
    webpack打包是如何处理css图片的
    这个我看过一本书《深入浅出webpack》，所以基本都能回答上来。包括原理和编写loader、Plugin注意事项。当然，我自己没有写过。。。《深入浅出webpack》
    require.js的实现原理（如果使用过webpack，进一步会问，两者打包的异同及优缺点）
    1.webpack的入口文件怎么配置，多个入口怎么分割啥的，我也没太听清楚。
    2.我看到你的项目用到了Babel的一个插件：transform-runtime以及stage-2，你说一下他们的作用。
        比如generator啥的默认不转换，只转换语法，需要这个来转换，然后说profill啥的，扯了一下stage-1，stage-2，stage-3，这个问题回答还算清楚。
    3.我看到你的webpack配置用到webpack.optimize.UglifyJsPlugin这个插件，有没有觉得压缩速度很慢，有什么办法提升速度。
    2.有没有去研究webpack的一些原理和机制，怎么实现的。loader,他的原理


性能优化    
    1.无线性能优化
    10.你做过哪些性能
        Cache缓存之强制缓存和协商缓存.看具体详情
        CDN原理及应用
        HTTP压缩之gzip    
    dns原理、优化
    优化中会提到缓存的问题，问：静态资源或者接口等如何做缓存优化
    页面DOM节点太多，会出现什么问题？如何优化？
    直接操作dom性能问题，怎么优化(撸主自己扯到了react)
    雪碧图，移动端响应式图片，静态资源CDN，减少Dom操作（事件代理、fragment），压缩JS和CSS、HTML等，DNS预解析
        减少HTTP请求
        HTML优化：
        使用语义化标签
        减少iframe：iframe是SEO的大忌，iframe有好处也有弊端
        避免重定向
        CSS优化：
        布局代码写前面
        删除空样式
        不滥用浮动，字体，需要加载的网络字体根据网站需求再添加
        选择器性能优化
        避免使用表达式，避免用id写样式
        js优化：
        压缩
        减少重复代码
        图片优化：
        使用WebP
        图片合并，CSS sprite技术
        减少DOM操作
        缓存已经访问过的元素
        "离线"更新节点, 再将它们添加到树中
        避免使用 JavaScript 输出页面布局--应该是 CSS 的事儿
        使用JSON格式来进行数据交换
        使用CDN加速
        使用HTTP缓存：添加 Expires 或 Cache-Control 信息头
        使用DNS预解析
        Chrome内置了DNS Prefetching技术, Firefox 3.5 也引入了这一特性，由于Chrome和Firefox 3.5本身对DNS预解析做了相应优化设置，所以设置DNS预解析的不良影响之一就是可能会降低Google Chrome浏览器及火狐Firefox 3.5浏览器的用户体验。
        预解析的实现：
        用meta信息来告知浏览器, 当前页面要做DNS预解析:<meta http-equiv="x-dns-prefetch-control" content="on" />
        在页面header中使用link标签来强制对DNS预解析: <link rel="dns-prefetch" href="http://bdimg.share.baidu.com" />

安全问题
    前端安全问题：CSRF和XSS
    https加密过程,证书用途
    xss几种形式,防范手段,过滤哪些字符?
    xsrf原理,实例,防范手段(Laravel的token)
    Sql注入
    客户端脚本安全(XSS、CSRF之类的，安利一下《白帽子讲Web安全》)

封装、继承和多态
es5和es6的实现方式
原型继承、构造函数继承、组合继承、寄生组合继承优缺点和实现方式
还有es6的实现方式。一般这样就回答差不多了。后来网易还接着问，es5如何实现super关键字。看过babel转换后代码，但是这个。。真的忘记看了。大概说了下自己的实现思路，也就是装饰着模式。然后也就浑过这题了。
JS是如何实现继承的？
    object的prototype是什么？（接上一个问题）
    JS如何实现数据以及功能的封装。（即类是如何实现的）
    8.JS实现继承的几种方式
        借用构造函数实现继承
        function Parent1(){
            this.name = "parent1"
        }
        function Child1(){
            Parent1.call(this);
            this.type = "child1";
        }
    缺点：Child1无法继承Parent1的原型对象，并没有真正的实现继承（部分继承）
        借用原型链实现继承
        function Parent2(){
            this.name = "parent2";
            this.play = [1,2,3];
        }
        function Child2(){
            this.type = "child2";
        }
        Child2.prototype = new Parent2();
    缺点：原型对象的属性是共享的
        组合式继承
        function Parent3(){
            this.name = "parent3";
            this.play = [1,2,3];
        }
        function Child3(){
            Parent3.call(this);
            this.type = "child3";
        }
        Child3.prototype = Object.create(Parent3.prototype);
        Child3.prototype.constructor = Child3;

Virtual DOM，Diff 算法
    虚拟dom
    vue构建过程原理,具体流程
    template模板经过parse处理后返回AST 获得一棵AST后再经过generate()生成渲染函数-> 虚拟DOM patch函数，负责把虚拟DOM变为真正DOM。
    8.说一下Vue实现双向数据绑定的原理，
    MVC、MVVM了解么，数据双向绑定和单向绑定实现方式
    MVC和MVVM的设计模式
    mvp,mvc,mvvm
    单向数据流和mvc之类的对比 
    8.数据双向绑定单向绑定优缺点

移动端布局
浏览器渲染原理
        HTML被解析成DOM Tree，CSS被解析成CSS Rule Tree
        把DOM Tree和CSS Rule Tree经过整合生成Render Tree（布局阶段）
        元素按照算出来的规则，把元素放到它该出现的位置，通过显卡画到屏幕上
        1.浏览器工作原理
        2.浏览器解析过程
    http三次握手后拿到HTML，浏览器怎么加载
    阿里的一面问的问题，这个我之前在环球做过相关技术分享，所以大概都知道，从过程到不同内核差异（差异部分简单提了下）说了下dom、CSSDom以及paint等过程。然后面试官接着问如何防止repaint和reflow。大概从引起repaint和reflow等操作上说了下避免。网易的一面也问到了repaint和reflow。

手写代码（Array、String、prototype ）
    'abcd'.f() => 'd-c-b-a'
常用的函数 
    bind (好多家都考……)，throttle, debounce
    深拷贝的实现原理
    5.什么是函数柯里化？以及说一下JS的API有哪些应用到了函数柯里化的实现？
        JS中bind函数和数组的reduce方法用到了函数柯里化。
一些算法 




CSS盒模型 IE的怪异盒模型 标注浏览器的盒模型 box-sizing控制
2.说一下box-sizing的应用场景。 box-sizing: border-box; 不让溢出父元素
3.说一下你了解的弹性FLEX布局.
4.说一下一个未知宽高元素怎么上下左右垂直居中。
5.说一下原型链，对象，构造函数之间的一些联系。



8.有没有了解http2.0,websocket,https，说一下你的理解以及你所了解的特性。

4.简历上看见你了解http协议。说一下200和304的理解和区别
协商缓存和强制缓存的区别，流程，还有一些细节，提到了expires,Cache-Control,If-none-match,Etag,last-Modified的匹配和特征

介绍一下你做的这个项目，进一步细问：整个项目有哪些模块，你主要负责哪些
    你在项目中的角色 你在项目中做的最出彩的一个地方 介绍一下在项目中遇到的难点
    说一说项目里边的安全问题(sql注入，xss，csrf什么的)
    项目中immutable的用处，如果immutable被破坏了会有什么现象以及原因
    写项目的收获
    结合项目经验介绍一下自己
    介绍一下你在项目中遇到的坑，你又是怎么填坑的
    介绍一下项目两人对话的实现过程(项目是im,所以有这个问题)
    7.说一下你项目中用到的技术栈，以及觉得得意和出色的点，以及让你头疼的点，怎么解决的。
    8.说一下项目中觉得可以改进的地方以及做的很优秀的地方？



3.babel把ES6转成ES5或者ES3之类的原理是什么，有没有去研究。
4.git大型项目的团队合作，以及持续集成啥的。

6.ES6的箭头函数this问题，以及拓展运算符。
7.JS模块化Commonjs,UMD,CMD规范的了解，以及ES6的模块化跟其他几种的区别，以及出现的意义。
以及vue.js和react.js异同点，如果让你选框架，你怎么怎么权衡这两个框架，分析一下。



主要是发布订阅的设计模式，还有就是ES5的Object.defineProperty的getter和setter机制
2.一个业务场景，面对产品不断迭代，以及需求的变动该怎么应对，具体技术方案实现。
    ① 怎么获取一个元素到视图顶部的距离。
    ② getBoundingClientRect获取的top和offsetTop获取的top区别
    ③事件委托
1.业务场景：比如说百度的一个服务不想让阿里使用，如果识别到是阿里的请求，然后跳转到404或者拒绝服务之类的？
    考察http协议头Referer，然后怎么判断是阿里的ip或者啥的，我也不太清楚。
2.二分查找的时间复杂度怎么求，是多少
3.XSS是什么，攻击原理，怎么预防
两种：反射型和存储型，简单说了一下如何防御：①转义②DOM解析白名单③第三方库④CSP
4.线性顺序存储结构和链式存储结构有什么区别？以及优缺点。
5.分析一下移动端日历，PC端日历以及桌面日历的一些不同和需要注意的地方。
6.白板写代码，用最简洁的代码实现数组去重。
ES6实现：[...new Set([1,2,3,1,'a',1,'a'])]
ES5实现：[1,2,3,1,'a',1,'a'].filter(function(ele,index,array){    return index===array.indexOf(ele)})
7.怎么实现草稿，多终端同步，以及冲突问题？
6.ES6历史以及新特性有哪些?
 
9.常见兼容性问题,列举(移动端/PC端)


类似百度搜索的提示框，兼容各大浏览器，可用键盘控制.

阿里一面
1.Ajax原理 原生Ajax实现过程 XHR具体底层原理和API

3.垂直居中
4.数据类型判断
5.路由实现
6.数据本地存储

3.数据存储
搜狐一面
1.Dom操作
2.移动布局方案
3.前后端协作
1.单链表反转
2.快排
3.即时通信(除了Ajax和websocket)
    1.Comet技术：基于HTTP长连接的Web端实时通信技术
    2.SSE：服务器发送事件,使用长链接进行通讯
4.服务器代理转发如何处理cookie(nginx)
    proxy_cookie_domain localhost example.org;
    proxy_cookie_domain ~\.([a-z]+\.[a-z]+)$ $1;
    proxy_cookie_path /one/ /;
    proxy_cookie_path / /two/;
6.this
7.rem布局的优缺点
腾讯Alloy Team
实现动画有哪些途径: CSS3 JS帧动画,定时器,requestAnimateFrame Canvas动画 SVG图片

设计模式(要求说出如何实现,应用,优缺点):
    工厂模式 发布订阅模式
    单例模式实现

读过哪些框架源码?
如何写一个CSS库,要注意哪些东西?


BST
promiseAll如何实现,以及如何实现多层异步回调?
加油站问题(贪心算法)
Latex怎么解析
hash算法实现,如何避免冲突,如何在冲突里检测
Generater
ES6怎么编译成ES5,css-loader原理,过程
ES6转成ES5的常见例子
常见数据结构,常见算法
node多线程实现
进程和线程
说说rn,weex原理
Jq的选择器引擎,('.a').find('.b')
MD5摘要算法其他用途

SSR适用什么场景?SPA首屏空白原因?
vue2新增内容?独立构建（standalone）和运行时构建（runtime-only）的差别和应用?
爬虫的实现原理?如何实现一个爬虫,如何解析文件?
如何解决爬虫慢的问题?
多线程如何保障各个线程的安全?
CSS3实现卡片翻转?
说说HTML难点,语义化的体现?
说说CSS重要难点?
JS中this是什么?如何改变this?
讲讲时间复杂度计算?
算法题:假定26个字母对应1-26,将一串数字转成字母有多少种可能?
暴力解法复杂度是多少?
(百度外卖业务:包含移动客户端(RN,hybrid),PC web端,H5,后台界面vue,桌面应用包含编辑器插件,前端构建工具,node中间层)
session和sessionStorage
map forEach(数组各个API细节)

三种隐藏方式差别:visibility:hidden,display:none,opacity:0
    1.display:none物理消失 立即消失（无动画）
    2、visibility:hidden：视觉消失 不可触发事件 等会消失（同transition设置的时间），无动画
    3、opacity:0：视觉消失 可触发事件 有动画 

inline和block元素列举,block和inline-block区别?
span包含12px大小英文'abc',问span高度?baseline怎么理解?
css实现自适应正方形?
string查找第一个不重复字符.如果换成字符串呢?
Angular数据绑定机制?
重绘和回流的理解
querySelectAll和ByClassName所获取元素的区别?如何绑定事件?
getComputedStyle用法?
正则匹配电话号码.exec,match,search用法?推荐一篇高质量正则文章
数据类型判断的方法,toString判断的来源?
ES6 class原理?
function rest参数长度?function.length如何判断与arguments对象长度区别?
var a;typeof a;let a;考察点
vuex原理,watch对象
js defer async顺序,模块依赖(AMD,CMD差别)
设计模式和应用
session和cookie
cookie存储在哪里?(memory)
Flexbox用法,详见总结
排序,找出最大三个数
快排原理,复杂度计算

vdom原理,实现

四栏布局
数组,数组对象去重
数组查某个字符出现次数
选择器权值
右键菜单定制
Ruff
函数不定参
定时器原理
url=>渲染:script阻塞
数据结构应用
三栏布局
内联元素包含块元素的表现
三种隐藏方式的区别
求最大子数组和.
块元素和内联元素渲染区别?
ul li实现计数.
flex-box用法
svg与canvas
JPG,png图片特点,场景
CSS写轮播
拖拽组建
PV统计
URL监听变化
1.数组操作
2.排序算法
3.动态规划(书包问题)
4.编程题(正则)
线程
各类通信协议
二叉树
算法复杂度
栈封装,利用栈对数组reverse(编程)
美团
各类排序算法以及复杂度计算
Node的一些用法
二叉树遍历
JS内部属性
页面之间传参
程序题:数组找公共元素
出入栈可能性计算
数组去重
1.使用箭头函数需要注意的地方
没有 this、super、arguments、new、prototype 


5.说说HTML5中有趣的标签（新标签及语义化）
如果代码写的语义化，有利于SEO。搜索引擎就会很容易的读懂该网页要表达的意思。例如文本模块要有大标题，合理利用h1-h6，列表形式的代码使用ul或ol，重要的文字使用strong等等。总之就是要充分利用各种HTML标签完成他们本职的工作
6.git命令，如何批量删除分支
git branch |grep 'branchName' |xargs git branch -D,从分支列表中匹配到指定分支，然后一个一个(分成小块)传递给删除分支的命令，最后进行删除。(参考这里)
7.创建对象的三种方法
第一种方式，字面量
var o1 = {name: "o1"}
第二种方式，通过构造函数
var o2 = new Object({name: "o2"})
var M = function(name){ this.name = name }
var o3 = new M("o3")
第三种方式，Object.create
var  p = {name: "p"}
var o4 = Object.create(p)
新创建的对o4的原型就是p，同时o4也拥有了属性name


9.当new Foo()时发生了什么
1.创建了一个新对象
2.将新创建的空对象的隐式原型指向其构造函数的显示原型。
3.将this指向这个新对象
4.如果无返回值或者返回一个非对象值，则将新对象返回；如果返回值是一个新对象的话那么直接直接返回该对象。
参考《JS高程》6.2.2


对前端的理解
前端架构的理解
前端框架的看法
如何做前后端分离
在不使用后端模板渲染的情况下,如何做前端数据直出(不使用异步请求数据)?

12.前端路由的原理
什么是路由？简单的说，路由是根据不同的 url 地址展示不同的内容或页面
使用场景？前端路由更多用在单页应用上, 也就是SPA, 因为单页应用, 基本上都是前后端分离的, 后端自然也就不会给前端提供路由。
前端的路由和后端的路由在实现技术上不一样，但是原理都是一样的。在 HTML5 的 history API 出现之前，前端的路由都是通过 hash 来实现的，hash 能兼容低版本的浏览器。
两种实现前端路由的方式
HTML5 History两个新增的API：history.pushState 和 history.replaceState，两个 API 都会操作浏览器的历史记录，而不会引起页面的刷新。
Hash就是url 中看到 # ,我们需要一个根据监听哈希变化触发的事件( hashchange) 事件。我们用 window.location 处理哈希的改变时不会重新渲染页面，而是当作新页面加到历史记录中，这样我们跳转页面就可以在 hashchange 事件中注册 ajax 从而改变页面内容。
优点
从性能和用户体验的层面来比较的话，后端路由每次访问一个新页面的时候都要向服务器发送请求，然后服务器再响应请求，这个过程肯定会有延迟。而前端路由在访问一个新页面的时候仅仅是变换了一下路径而已，没有了网络延迟，对于用户体验来说会有相当大的提升。
更多内容请看这里
缺点
使用浏览器的前进，后退键的时候会重新发送请求，没有合理地利用缓存。
13.Restful API是什么，如何设计RESTful API？
RESTful API是指符合REST设计风格的Web API，为了使的接口安全、易用、可维护以及可扩张，一般设计RESTful API需要考虑以下几个方面：
通信用HTTPS安全协议
在URL中加入版本号
URL中的路径不能有动词，只能用名词
用HTTP方法对资源进行增删改查的操作
用HTTP状态吗传达执行结果和失败原因
为集合提供过滤、排序、分页功能
用查询字符串或HTTP首部Accpet进行内容协商，指定返回结果的数据格式
及时更新文档，每个接口都有对应的说明
14.script标签的defer、async的区别
defer是在HTML解析完之后才会执行，如果是多个，按照加载的顺序依次执行
async是在加载完成后立即执行，如果是多个，执行顺序和加载顺序无关

跨域通信的几种方式,各有什么优缺点？
具体展开会把CORS跨域，heade信息字段都说了一遍
当使用隐藏框架实现跨域请求时，如果框架页跟当前页不属于同个父域，是否可以实现跨域？
jsonp原理、postMessage原理
延伸：跨域的js运行错误可以捕获吗，错误提示什么，应该怎么处理？可以。
    Script error
        1.在script标签增加crossorigin属性
        2.设置js资源响应头Access-Control-Allow-Orgin:*
    JSONP JSONP原理
    Hash
    postMessage
    WebSocket
    CORS


17.如何进行错误监控
前端错误的分类
即时运行错误（代码错误）
资源加载错误
错误的捕获方式
即时运行错误的捕获方式：
try...catch
window.onerror
资源加载错误：
object.onerror（如img,script）
performance.getEntries()
Error事件捕获

上报错误的基本原理
    采用Ajax通信方式上报
    利用Image对象上报


19.本地起了一个http server，为什么只能在同一个WIFI(局域网)上访问？
你没有公网IP当然就不能被外网访问了。常见的WIFI情况下，一般的ip会是~192.168.0.x·这样的，只是对局域网(同WIFI下)可见，但是外网是访问不了的。（segmentfault上的答案）
20.回流和重绘
参考《如何写出高性能DOM？》
21.数组去重的方法
参考：《JavaScript数组去重》
22.深拷贝与浅拷贝



HTTPS的握手过程
浏览器将自己支持的一套加密规则发送给服务器。
服务器从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，加密公钥，以及证书的颁发机构等信息。
浏览器获得网站证书之后浏览器要做以下工作：
验证证书的合法
如果证书受信任，或者是用户接受了不受信的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密。
使用约定好的HASH算法计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有信息发送给服务器
网站接收浏览器发来的数据之后要做以下的操作：
使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证HASH是否与浏览器发来的一致。
使用密码加密一段握手消息，发送给浏览器。
浏览器解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，之后所有的通信数据将由之前浏览器生成的随机密码并利用对称加密算法进行加密。
参考文章：《HTTPS 工作原理和 TCP 握手机制》


27.响应式图片
1.JS或者服务端硬编码，resize事件，判断屏幕大小加载不同的图片
2.img srcset 方法
3.picture标签 -> source
4.svg
5.第三方库polyfill

28.判断一个变量是否是数组
var a = []; 
// 1.基于instanceof 
a instanceof Array; 
// 2.基于constructor 
a.constructor === Array; 
// 3.基于Object.prototype.isPrototypeOf 
Array.prototype.isPrototypeOf(a); 
// 4.基于getPrototypeOf 
Object.getPrototypeOf(a) === Array.prototype; 
// 5.基于Object.prototype.toString 
Object.prototype.toString.apply(a) === '[object Array]';
// 6.Array.isArray
Array.isArray([]); // true
以上，除了Object.prototype.toString外，其它方法都不能正确判断变量的类型。
29.UTF-8和Unicode的区别
UTF-8就是在互联网上使用最广的一种unicode的实现方式。
Unicode的出现是为了统一地区性文字编码方案，为解决unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。
ASCII --> 地区性编码（GBK） --> Unicode --> UTF-8
防止重复发送Ajax请求
用户点击之后按钮disabled;
函数节流
abort掉上一个请求。



浏览器缓存机制
Expires策略
Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。
Cache-Control策略
Cache-Control与Expires的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓读取数据还是重新发请求到服务器取数据。只不过Cache-Control的选择更多，设置更细致，如果同时设置的话，其优先级高于Expires。
以上是设置缓存时间的两种方法。那么当缓存时间过了咋整呢？有人肯定说了，那就再次发起请求啊，这是对的。问题是如果服务器资源并没有更新呢？比如说我有一个jQuery.js文件已经缓存了，当它的缓存时间到了之后服务器的jQuery.js文件也没有更新，那实际上我们直接使用本地缓存的文件就可以啊！没必要浪费带宽和时间去重新请求一个新的文件啊！这时候我们就需要再进一步看一下HTTP协议里这几个参数的作用了。
Last-Modified/If-Modified-Since
首先Last-Modified/If-Modified-Since要配合Cache-Control使用。
Last-Modified：标示这个响应资源的最后修改时间。web服务器在响应请求时，告诉浏览器资源的最后修改时间(这个参数是和Cache-Control一起过来的)。
If-Modified-Since：当资源过期时（使用Cache-Control标识的max-age），发现资源具有Last-Modified声明，则再次向web服务器请求时带上头 If-Modified-Since，表示请求时间。web服务器收到请求后发现有头If-Modified-Since ，则与被请求资源的最后修改时间进行比对。若最后修改时间较新，说明资源又被改动过，则响应整片资源内容（写在响应消息包体内），HTTP 200；若最后修改时间较旧，说明资源无新修改，则响应HTTP 304 (无需包体，节省浏览)，告知浏览器继续使用所保存的cache。
ETag/If-None-Match
Etag/If-None-Match也要配合Cache-Control使用。
Etag：web服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器觉得）。Apache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。
If-None-Match：当资源过期时（使用Cache-Control标识的max-age），发现资源具有Etage声明，则再次向web服务器请求时带上头If-None-Match（Etag的值）。web服务器收到请求后发现有头If-None-Match 则与被请求资源的相应校验串进行比对，决定返回200或304。
ETag和Last-Modified
HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：
Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间
如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存
有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形
Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。
Ajax的状态值
0: (未初始化)还没有调用send()方法。
1: (载入)已经调用send()方法，正在派发请求。
2: (载入完成)send()已经执行完成，已经接收到全部的响应内容。
3: (交互)正在解析响应内容。
4: (完成)响应内容已经解析完成，用户可以调用。

图片懒加载与预加载
图片懒加载的原理就是暂时不设置图片的src属性，而是将图片的url隐藏起来，比如先写在data-src里面，等某些事件触发的时候(比如滚动到底部，点击加载图片)再将图片真实的url放进src属性里面，从而实现图片的延迟加载
图片预加载，是指在一些需要展示大量图片的网站，实现图片的提前加载。从而提升用户体验。常用的方式有两种，一种是隐藏在css的background的url属性里面，一种是通过javascript的Image对象设置实例对象的src属性实现图片的预加载。相关代码如下：
JavaScript内存泄露的原因以及如何去手动释放内存
易出现泄露的场景
XMLHttpRequest 泄漏发生在IE7-8,释放方法，将XMLHttpRequest实例对象设置为Null；
DOM&BOM等COM对象循环绑定 泄漏发生在IE6-8，释放方法，切断循环引用，将对对象的应用设置为Null；
定时器(严格上说不能算是泄露，是被闭包持有了，是正常的表现)，对于闭包中无用的变量可以使用delete操作符进行释放；
JavaScript垃圾回收机制
引用计数
此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。
限制：无法处理循环引用。在下面的例子中，两个对象被创建，并互相引用，形成了一个循环。它们被调用之后不会离开函数作用域，所以它们已经没有用了，可以被回收了。然而，引用计数算法考虑到它们互相都有至少一次引用，所以它们不会被回收。
标记清除
当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。
垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。
ess常用特性
变量(@color = #fff)
混合(Mixin)
内置函数(颜色，字符串，类型判断，数学)
循环
嵌套
运算
导入(@import)


XSS与CSRF介绍
XSS是一种跨站脚本攻击，是属于代码注入的一种，攻击者通过将代码注入网页中，其他用户看到会受到影响(代码内容有请求外部服务器);
CSRF是一种跨站请求伪造，冒充用户发起请求，完成一些违背用户请求的行为(删帖，改密码，发邮件，发帖等)
防御方法举例:
对一些关键字和特殊字符进行过滤(<>,?,script等)，或对用户输入内容进行URL编码(encodeURIComponent);
Cookie不要存放用户名和密码，对cookie信息进行MD5等算法散列存放，必要时可以将IP和cookie绑定;
HTML & CSS 部分
css常用布局
这个在面试上市公司和创业公司问的比较多。大概我会回答一些盒模型包括怪异盒模型，定位布局，流布局，浮动布局，flex和grid布局，包括还有三栏布局中的圣杯和双飞翼。这些都还比较熟悉，所以问到都还知道。其中flex布局问的比较多，阿里的交叉面还有别的公司有问到子元素的一些属性。
居中问题
这个应该是老生常谈的东西了，电话面试的时候有两家问到
session、cookie、sessionStorage、localStorage等区别
这个也是上市公司和创业公司问到，大概就是说了下中间的区别，还有会简单说下cookie的属性，
px/em/rem的区别
滴滴电面的时候问的，这个我也知道，大概说了下相对于父元素还是文档来确定大小之类的。
animation和transiton的相关属性
这个我也就用了个大概，大概知道的简写位置和属性，当然，阿里一面还问到，为什么动画推荐用c3而不是js，这个问题当时并没有回答好，大概就是从性能上扯了扯，但是什么占用主线程以及浏览器对c3加速都没聊到。然后网易面试也问到了，然后我巴拉巴拉说了下后来查的相关东西。然后网易问了一句，浏览器怎么优化的动画。。。我。。。不知道。
css编写注意事项
因为这个在之前团队里面没有明文规定，所以我也没总结过，大概说了下自己编码中的方式，和浏览器查抄的过程。
css和HTML 问的的确都不是很多，然后还有什么标签，meta和media啥的，大概也就介绍了下，问的都不是很深，我也没有回答的很深。。。因为我HTML CSS真的一般般。
JavaScript部分
JavaScript数据类型分哪些
比如css画三角形之类的。别说，之前没准备，还真的忘记了border怎么设置出现直角三角形还是等腰三角形。当然，这个类型还是。。。没得说的





JavaScript的节流和防抖



ajax请求方式
因该算是考察基础功吧，谈了下XMLHTTPRequest的过程，readyState的几种类型和代表的意思。以及浏览器兼容性的处理方案。
js判断数据类型的方法
貌似有两家公司问到，大概说了下typeof、instanceof、constructor、prototype等判断方式，注意事项以及优缺点。应该回答的还可以
函数声明和变量声明
this指向的问题
这个我也总结相关文章，大概说了下四种绑定规则，还说下new的执行过程以及箭头函数注意事项

对于js这门语言你认为怎么样
哇，这个问题问的真的大。有看过《JavaScript语言精粹》，大概说了哪些弱类型语言通病，因为之前搞过Java，所以综合对比了下，同时也说了这些诟病怎么解决。应该会的面试官还是挺满意的
这个应该回答的都不是很深入，大概我都用过，promise的实现方式也研究过，但是不记得哪一家公司问到generator的怎么实现的。
大概从iterator上简单说了自己的方案，然后说没看过。然后对于别的其实问的不是很多。基本套路就是es6了解过吗？用过哪些语法。
后面具体可能会说下哪一个新特性的实现方式或者转向babel、
如何设计一些组件，原则是什么，你写过什么自豪或者眼前一亮的组件
阿里一面以及一家上市公司也闻到过这类似的问题，大概从组合、复用、重复、测试、维护等方面说了下
a组件在b组件内，c组件在a组件内，如何让他渲染出来，a组件和c组件同级



如何利用h5 的history API来实现路由跳转

前端优化一般都做哪些
这个之前总结过，雅虎的军规啥的。以及首屏优化。然后面试跟了些预加载http head信息相关的，这个没怎么看，回答的不是很好
浏览器缓存
这个我也做了相关的技术分享，也看过《图解http》大概从http 1.0和1.1都说了下，其中有一家公司问到200 From cache和200 ok区别（有赞），这个还真的忽略了，后来查了下大概了解了。其实也就是强缓存
http2.0相关
网易一面问题，说了下2.0的采用二进制格式、多路复用、报文头压缩、服务器主动推送还扯了websocket的相关内容WebSocket：5分钟从入门到精通。然后网易接着问，报文头怎么压缩的？我。。。？？不知道。。。然后大概也问了下https的TLS/SSL,之前看过漫画的htts的相关东西，大概说了下漫画里面的故事~
post、get区别
这个回答的不是很好，也是一个大厂问的题目，我回答的都是表象。后来我看了一篇文章，大概知道了。99%的人都理解错了HTTP中GET与POST的区别
别的我也不记得了，回头想起来在来补充吧
构建工具


babel 问的不多，但是我也准备了，包括每一个包的作用和内部转换过程，不记得哪家公司问了，大概我也就说了下babel转换的过程。



如何实现私有变量？说出一种方法即可。
发送ajax请求有多少个步骤？如何判定发送成功？（readyState和onreadystatechange）
    


100 * 100 的 Canvas 占内存多大？
给定一个数组排序，使得奇数位的值不大于相邻偶数位的值。
HTML5新增了哪些内容或API，使用过哪些
input和textarea的区别
用一个div模拟textarea的实现
移动设备忽略将页面中的数字识别为电话号码的方法 --- 2017.06.10补充
左右布局：左边定宽、右边自适应，不少于3种方法
CSS3新特性
BFC
    不与浮动元素重叠(解决边距重叠、清楚浮动)
    计算BFC的高度的时候，浮动元素也会参与计算
    生成 BFC:
        根元素
        overflow不为visible
        float不为none
        position为absolute或fixed
        display为inline-block、table-cell、table-caption、flex、inline-flex

IFC
对栅格的理解
（水平）居中有哪些实现方式
1像素边框问题
JavaScript
图片懒加载
实现页面加载进度条
实现extend函数


实现拖拽功能，比如把5个兄弟节点中的最后一个节点拖拽到节点1和节点2之间
动画：setTimeout何时执行，requestAnimationFrame的优点
手写parseInt的实现：要求简单一些，把字符串型的数字转化为真正的数字即可，但不能使用JS原生的字符串转数字的API，比如Number()
编写分页器组件的时候，为了减少服务端查询次数，点击“下一页”怎样能确保还有数据可以加载（请求数据不会为空）？

使用前端框架相对于使用jQuery带来哪些好处
单页应用，如何实现其路由功能

输入一个URL，Enter之后发生了什么
（承上）页面的渲染过程



面试阿里云那个岗位的时候，有要求算法和数据结构，有能力者多多准备吧。

百度一面：
你知道AOP吗？
如果有一个N条数据列表需要渲染，怎么样才能使浏览器不卡

两道算法题
内存泄漏
百度二面
http相关(三次握手，四次挥手，http2.0)
快排和数组去重

此处省略N多问题
阿里一面
自我介绍

从 url 到页面展现过程
缓存(重点，绝对是)
给你做淘宝首页搜索框你会怎么做


介绍vue的优缺点
redux
小部分基础的js和css问题
平时是怎么学习的,遇到问题怎么解决的
阿里二面
自我介绍
高阶组件的作用
高阶组件
stateless组件(感觉主要是让我回答纯函数的概念)

http2.0对比http1.x
哪些css会影响性能



怎么让组件适应不同场景
为什么放弃sails选用koa，koa和sails性能对比
关于移动端开发

cache-control指令

数据库的索引作用、原理

MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型 :浏览器会自动使用指定应用程序来打开
HTTP 超文本传输协议 特点:简单 灵活 无连接 无状态


HTTP 常用的请求方法：
    GET - URL传参 2KB
    POST - 请求体传数据 8M
    PUT - 资源更新

HTTP状态码 
    1信息  2成功  3重定向 4客户端 5服务端
    204 No Content：没有新文档，浏览器应该继续显示原来的文档
    206 Partial Content：客户发送了一个带有Range头的GET请求，服务器完成了它
    301 Moved Permanently：所请求的页面已经转移至新的url
    302 Found：所请求的页面已经临时转移至新的url
    304 Not Modified：客户端有缓冲的文档并发出了一个条件性的请求，服务器告诉客户，原来缓冲的文档还可以继续使用。(重点: 304)    
    401 Unauthorized：请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用    
    502 & Bad Gateway: 错误的网关；
    503 & Service Unavailable: 服务器超载或正在维护，无法处理请求； 
    504 & Gateway timeout: 网关超时；

行内元素：a、b、span、img、input、strong、select、label、em、button、textarea
块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote
空元素：br、meta、hr、link、input、img


4、简述一下src与href的区别
href 超链接
src  下载嵌入当前标签位置 会阻塞

 6、px和em的区别
   em继承父元素的字体大小    浏览器的默认字体高都是16px: 1em=16px

优雅降级(减少功能)和渐进增强(增加功能)

sessionStorage 、localStorage 和 cookie 之间的区别
(1)发到服务器
(2)大小 4K 5M
(3)有效期
(4)作用域 同源同窗口   同浏览器

Web Storage与Cookie相比存在的优势：
(1)、大


